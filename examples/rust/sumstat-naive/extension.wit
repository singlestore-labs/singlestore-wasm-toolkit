// sumstat-naive() operation

type state = s32
type blob = list<u8>
type input = float64

// result type
// TODO: might want to implement std and var?
record sumstat-res {
  avg: float64,
  min: float64,
  max:float64,
  p1: float64,
  p5: float64,
  p50: float64,
  p95: float64,
  p99: float64,
}

/* HANDLE FUNCTIONS */
sumstat-init-handle: func() -> state
sumstat-update-handle: func(s: state, value: input) -> state
sumstat-merge-handle: func(left: s32, right: s32) -> state
sumstat-serialize-handle: func(s: state) -> blob
sumstat-deserialize-handle: func(data: blob) -> state

// summary statistics
sumstat-summary: func(s: state) -> sumstat-res

// t-test
sumstat-t-test-one: func(s: state, mu: float64) -> float64
sumstat-t-test-paired: func(left: state, right: state, mu: float64) -> float64
sumstat-t-test-indep: func(left: state, right: state) -> float64
sumstat-t-test-indepu: func(left: state, right: state) -> float64

// chi-squared test, assume contigency table states
sumstat-chi-squared-test: func(s: list<state>) -> float64
